package com.hadoop.common_friends;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.log4j.Logger;

/**
 * Created by zhao on 2018-03-05.
 */
public class CommonFriendsDriver extends Configured implements Tool {

    private static final Logger THE_LOGGER = Logger.getLogger(CommonFriendsDriver.class);

    /**
     * Dispatches command-line arguments to the tool by the ToolRunner.
     */
    public static void main(String[] args) throws Exception {

        if (args.length < 2){
            throw new IllegalArgumentException("Usage: CommonFriends <inputFile>,<outputFile>,[neighborWindow]");
        }
        int runStatus = ToolRunner.run(new CommonFriendsDriver(), args);
        System.exit(runStatus);
    }

    @Override
    public int run(String[] args) throws Exception {
        /*if (args.length < 2) {
            System.err.println("Usage: CommonFriends <inputFile>,<outputFile>,[neighborWindow]");
            return 1;
        }*/

        Path inputPath = new Path(args[0]);
        Path outputPath = new Path(args[1]);

        Configuration conf = getConf();
        Job job = Job.getInstance(conf, "CommonFriends");

        FileInputFormat.setInputPaths(job, inputPath);
        FileOutputFormat.setOutputPath(job, outputPath);

        // (key,value) generated by map()
        // job.setMapOutputKeyClass(PairOfWords.class);
        // job.setMapOutputValueClass(IntWritable.class);

        // (key,value) generated by reduce()
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);

        job.setMapperClass(CommonFriendsMapper.class);
        job.setReducerClass(CommonFriendsReducer.class);
        // job.setCombinerClass(RelativeFrequencyCombiner.class);
        // job.setPartitionerClass(OrderInversionPartitioner.class);
        // job.setNumReduceTasks(3);

        long startTime = System.currentTimeMillis();
        job.waitForCompletion(true);
        THE_LOGGER.info("Job Finished in milliseconds: " + (System.currentTimeMillis() - startTime));
        return 0;
    }
}
