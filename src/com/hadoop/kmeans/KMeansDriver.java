package com.hadoop.kmeans;

import com.hadoop.common_friends.CommonFriendsMapper;
import com.hadoop.common_friends.CommonFriendsReducer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.log4j.Logger;

/**
 * Created by zhao on 2018-03-08.
 */
public class KMeansDriver extends Configured implements Tool {

    private static final Logger THE_LOGGER = Logger.getLogger(KMeansDriver.class);

    /**
     * Dispatches command-line arguments to the tool by the ToolRunner.
     */
    public static void main(String[] args) throws Exception {

        if (args.length < 4){
            throw new IllegalArgumentException("Usage: KMeans <inputFile>,<oldCenterFile>,<newCenterFile>,<centerNum>");
        }
        int runStatus = ToolRunner.run(new KMeansDriver(), args);
        System.exit(runStatus);
    }

    @Override
    public int run(String[] args) throws Exception {
        int repeated = 0;
        long startTime = System.currentTimeMillis();
        do {
            repeated++;
            Path inputPath = new Path(args[0]);
            Path oldCenterPath = new Path(args[1]);
            Path newCenterPath = new Path(args[2]);
            int centerNum = Integer.parseInt(args[3]);

            Configuration conf = getConf();
            conf.setInt("center.num", centerNum);
            conf.set("center.path", args[1]);
            Job job = Job.getInstance(conf, "KMeans");

            KmeansUtil.deletePath(args[2], conf);

            FileInputFormat.setInputPaths(job, inputPath);
            FileOutputFormat.setOutputPath(job, newCenterPath);

            // (key,value) generated by map()
            // job.setMapOutputKeyClass(PairOfWords.class);
            // job.setMapOutputValueClass(IntWritable.class);

            // (key,value) generated by reduce()
            job.setOutputKeyClass(IntWritable.class);
            job.setOutputValueClass(Text.class);

            job.setMapperClass(KMeansMapper.class);
            job.setReducerClass(KMeansReducer.class);
            // job.setCombinerClass(RelativeFrequencyCombiner.class);
            // job.setPartitionerClass(OrderInversionPartitioner.class);
            // job.setNumReduceTasks(3);

            job.waitForCompletion(true);

        } while (repeated > 10 || !KmeansUtil.isFinished(args[1], args[2], Integer.parseInt(args[3]), 0.000005, new Configuration()));

        THE_LOGGER.info("Job Finished in milliseconds: " + (System.currentTimeMillis() - startTime) + ", Step : " + repeated);
        return 0;
    }
}
