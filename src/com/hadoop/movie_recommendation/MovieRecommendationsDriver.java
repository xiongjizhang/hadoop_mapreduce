package com.hadoop.movie_recommendation;

import com.hadoop.friend_recommendation.FriendRecommendationMapper;
import com.hadoop.friend_recommendation.FriendRecommendationReducer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.log4j.Logger;

/**
 * Created by zhao on 2018-03-07.
 */
public class MovieRecommendationsDriver extends Configured implements Tool {

    private static final Logger THE_LOGGER = Logger.getLogger(MovieRecommendationsDriver.class);

    /**
     * Dispatches command-line arguments to the tool by the ToolRunner.
     */
    public static void main(String[] args) throws Exception {

        if (args.length < 4){
            throw new IllegalArgumentException("Usage: MovieRecommendations <inputFile>,<outputFile>,<outputFile2>,<outputFile3>,[neighborWindow]");
        }
        int runStatus = ToolRunner.run(new MovieRecommendationsDriver(), args);
        System.exit(runStatus);
    }

    @Override
    public int run(String[] args) throws Exception {

        Path inputPath = new Path(args[0]);
        Path outputPath = new Path(args[1]);
        Path outputPath2 = new Path(args[2]);
        Path outputPath3 = new Path(args[3]);

        Configuration conf = getConf();
        Job job = Job.getInstance(conf, "MovieRecommendations 1");

        FileInputFormat.setInputPaths(job, inputPath);
        FileOutputFormat.setOutputPath(job, outputPath);

        // (key,value) generated by map()
        job.setMapOutputKeyClass(Text.class);
        job.setMapOutputValueClass(Text.class);

        // (key,value) generated by reduce()
        job.setOutputKeyClass(NullWritable.class);
        job.setOutputValueClass(Text.class);

        job.setMapperClass(MovieRecommendationsMapper1.class);
        job.setReducerClass(MovieRecommendationsReducer1.class);


        Job job2 = Job.getInstance(conf, "MovieRecommendations 2");

        FileInputFormat.setInputPaths(job2, outputPath);
        FileOutputFormat.setOutputPath(job2, outputPath2);

        // (key,value) generated by map()
        job2.setMapOutputKeyClass(Text.class);
        job2.setMapOutputValueClass(Text.class);

        // (key,value) generated by reduce()
        job2.setOutputKeyClass(NullWritable.class);
        job2.setOutputValueClass(Text.class);

        job2.setMapperClass(MovieRecommendationsMapper2.class);
        job2.setReducerClass(MovieRecommendationsReducer2.class);


        Job job3 = Job.getInstance(conf, "MovieRecommendations 3");

        FileInputFormat.setInputPaths(job3, outputPath2);
        FileOutputFormat.setOutputPath(job3, outputPath3);

        // (key,value) generated by map()
        job3.setMapOutputKeyClass(Text.class);
        job3.setMapOutputValueClass(Text.class);

        // (key,value) generated by reduce()
        job3.setOutputKeyClass(NullWritable.class);
        job3.setOutputValueClass(Text.class);

        job3.setMapperClass(MovieRecommendationsMapper3.class);
        job3.setReducerClass(MovieRecommendationsReducer3.class);


        long startTime = System.currentTimeMillis();
        job.waitForCompletion(true);
        job2.waitForCompletion(true);
        job3.waitForCompletion(true);
        THE_LOGGER.info("Job Finished in milliseconds: " + (System.currentTimeMillis() - startTime));
        return 0;
    }
}
